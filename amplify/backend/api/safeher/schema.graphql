type Notification @model @auth(rules: [{allow: owner}]) {
  id: ID!
  title: String
  description: String
  timestamp: AWSDateTime
  metadata: AWSJSON
  type: String
  owner: String @auth(rules: [{ allow: owner, operations: [read, create, update, delete] }])
}

type LocationReport @model @auth(rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
  { allow: groups, groups: ["ADMIN"], operations: [read] }
]) {
  id: ID!
  report_type: String
  coordinates: AWSJSON
  location: String
  datetime: String
  ratings: [AWSJSON]
  description: String
  media: [AWSJSON]
  owner: String
}

type IncidentReport @model @auth(rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
  { allow: groups, groups: ["ADMIN"], operations: [read] }
]) {
  id: ID!
  report_type: String
  coordinates: AWSJSON
  location: String
  datetime: String
  category: [String]
  description: String
  media: [AWSJSON]
  owner: String
}

type MedicalRecord @model @auth(rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
  { allow: groups, groups: ["ADMIN"], operations: [read] }
]) {
  id: ID!
  date_of_birth: String
  medical_condition: String
  medical_notes: String
  medications: String
  blood_type: String
  organ_donor: String
  weight: String
  height: String
  skin_color: String
  hair_color: String
  tattoo: String
  owner: String
}

type EmergencyContact @model @auth(rules: [{allow: owner}]) {
  id: ID!
  name: String
  phone_number: String
  status: Int
  phone_number_id: String
  owner: String @auth(rules: [{ allow: owner, operations: [read, create, update, delete] }])
}

type UserVerification @model @auth(rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
  { allow: groups, groups: ["ADMIN"], operations: [read] }
]) {
  id: ID!
  id_name: String
  id_mime_type: String
  id_key: String
  selfie_name: String
  selfie_mime_type: String
  selfie_key: String
  verified: Boolean
  verify_status: String
  denied_reason: String
  owner: String
}

type SafeWords @model @auth(rules: [{allow: owner}]){
  id: ID!
  safe_word: String
  enabled: Boolean
  status: Int
  owner: String @auth(rules: [{ allow: owner, operations: [read, create, update, delete] }])
}

type AccountSettings @model @auth(rules: [{allow: owner}]){
  id: ID!
  enableBiometricLogin: Boolean
  enableFaceIdLogin: Boolean
  faceIDKey: String
  enableSafeWords: Boolean
  owner: String @auth(rules: [{ allow: owner, operations: [read, create, update, delete] }])
}

enum InviteCodes {
  SafeHer2024
  SafeHerCommute
  SDRC1979
  IDRC_ResponsibleAI
  SDG5
}

type AccountInvites @model @auth(rules: [
  {allow: public, operations: [create]}
  { allow: groups, groups: ["ADMIN"], operations: [read] },
]) {
  id: ID!
  code: InviteCodes
  cognito_id: String
}

type MobileAppOptions @model @auth(rules: [
  { allow: public, operations: [read] }
]) {
  requireVerifiedAccount: Boolean
}

type SignupStage @model @auth(rules: [
  { allow: owner, ownerField: "owner", operations: [create, update, delete, read] },
]) {
  id: ID!
  step: String
  owner: String
}